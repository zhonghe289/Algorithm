package com.asiainfo.arithmetic;

public class BinarySearchMain {
	
	/*
	 * 使用递归的方式实现二分查找
	 */
	public static int recursionBinarySearch(int[] array,int key,int low,int high){
		if(key<array[low] || key>array[high] || low>high){
			return -1;
		}
		int middle = (low+high)/2;
		if(key>array[middle]){   //目标数大于中间数，说明目标数位于右侧区间
			return recursionBinarySearch(array, key, middle+1, high);
		}else if(key<array[middle]){
			return recursionBinarySearch(array, key, low, middle-1);
		}else{
			return middle;
		}
	}
	/*
   *不是用递归的方式来实现二分查找
  */
	public static int commonBinarySearch(int[] array,int key){
		int low = 0;
		int high = array.length-1;
		if(key<array[low] || key>array[high] || low>high){
			return -1;
		}
		while(low<=high){
			int middle = (low+high)/2;
			if(key<array[middle]){
				high = middle-1;
			}else if(key>array[middle]){
				low = middle+1;
			}else{
				return middle;
			}
		}
		return -1;
	}
	
	public static void main(String[] args){
		int[] arrays = {1,3,5,7,9,11};
		int key = 7;
//		int position = recursionBinarySearch(arrays, key, 0, arrays.length-1);
		int position = commonBinarySearch(arrays, key);
		if(position == -1){
			System.out.println("本序列中未找到 "+key+"该元素！");
		}else{
			System.out.println(key+"位置为:"+position);
		}
	}

}
